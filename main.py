# -*- coding: utf-8 -*-
from datetime import datetime

# Form implementation generated from reading ui file 'tab.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import openpyxl
from openpyxl import Workbook
from PyQt5 import QtCore, QtWidgets
import category
import expense
import mysql.connector
from PyQt5.QtWidgets import QMessageBox


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(951, 740)
        MainWindow.setMinimumSize(QtCore.QSize(935, 640))
        MainWindow.setWindowTitle("")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(70, 40, 811, 621))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.tabWidget = QtWidgets.QTabWidget(self.gridLayoutWidget)
        self.tabWidget.setMinimumSize(QtCore.QSize(809, 579))
        self.tabWidget.setMaximumSize(QtCore.QSize(809, 16777215))
        self.tabWidget.setObjectName("tabWidget")
        self.tabCategory = QtWidgets.QWidget()
        self.tabCategory.setObjectName("tabCategory")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.tabCategory)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(10, 40, 641, 501))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.tblCategory = QtWidgets.QTableWidget(self.horizontalLayoutWidget)
        self.tblCategory.setObjectName("tblCategory")
        self.tblCategory.setColumnCount(2)
        self.tblCategory.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tblCategory.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblCategory.setHorizontalHeaderItem(1, item)
        self.horizontalLayout.addWidget(self.tblCategory)
        self.verticalLayoutWidget = QtWidgets.QWidget(self.tabCategory)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(670, 60, 121, 421))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.btnAdd = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.btnAdd.setObjectName("btnAdd")
        self.verticalLayout.addWidget(self.btnAdd)
        self.btnEdit = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.btnEdit.setObjectName("btnEdit")
        self.verticalLayout.addWidget(self.btnEdit)
        self.btnDelete = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.btnDelete.setObjectName("btnDelete")
        self.verticalLayout.addWidget(self.btnDelete)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem)
        self.tabWidget.addTab(self.tabCategory, "")
        self.tabExpenses = QtWidgets.QWidget()
        self.tabExpenses.setObjectName("tabExpenses")
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(self.tabExpenses)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(10, 40, 641, 501))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.tblExpenses = QtWidgets.QTableWidget(self.horizontalLayoutWidget_2)
        self.tblExpenses.setObjectName("tblExpenses")
        self.tblExpenses.setColumnCount(6)
        self.tblExpenses.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tblExpenses.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblExpenses.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblExpenses.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblExpenses.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblExpenses.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblExpenses.setHorizontalHeaderItem(5, item)
        self.horizontalLayout_2.addWidget(self.tblExpenses)
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.tabExpenses)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(670, 60, 121, 421))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.btnAddExpense = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.btnAddExpense.setObjectName("btnAddExpense")
        self.verticalLayout_2.addWidget(self.btnAddExpense)
        self.btnEditExpense = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.btnEditExpense.setObjectName("btnEditExpense")
        self.verticalLayout_2.addWidget(self.btnEditExpense)
        self.btnDeleteExpense = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.btnDeleteExpense.setObjectName("btnDeleteExpense")
        self.verticalLayout_2.addWidget(self.btnDeleteExpense)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem1)
        self.tabWidget.addTab(self.tabExpenses, "")
        self.tabReports = QtWidgets.QWidget()
        self.tabReports.setObjectName("tabReports")
        self.horizontalLayoutWidget_3 = QtWidgets.QWidget(self.tabReports)
        self.horizontalLayoutWidget_3.setGeometry(QtCore.QRect(10, 40, 641, 501))
        self.horizontalLayoutWidget_3.setObjectName("horizontalLayoutWidget_3")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_3)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.tableWidget = QtWidgets.QTableWidget(self.horizontalLayoutWidget_3)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(7)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(6, item)
        self.horizontalLayout_3.addWidget(self.tableWidget)
        self.verticalLayoutWidget_3 = QtWidgets.QWidget(self.tabReports)
        self.verticalLayoutWidget_3.setGeometry(QtCore.QRect(670, 60, 121, 421))
        self.verticalLayoutWidget_3.setObjectName("verticalLayoutWidget_3")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_3)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.btnGenerate = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        self.btnGenerate.setObjectName("btnGenerate")
        self.verticalLayout_3.addWidget(self.btnGenerate)
        self.pushButton = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout_3.addWidget(self.pushButton)
        self.pushButton_2 = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        self.pushButton_2.setObjectName("pushButton_2")
        self.verticalLayout_3.addWidget(self.pushButton_2)
        self.pushButton_3 = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        self.pushButton_3.setObjectName("pushButton_3")
        self.verticalLayout_3.addWidget(self.pushButton_3)
        self.pushButton_4 = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        self.pushButton_4.setObjectName("pushButton_4")
        self.verticalLayout_3.addWidget(self.pushButton_4)
        self.pushButton_5 = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        self.pushButton_5.setObjectName("pushButton_5")
        self.verticalLayout_3.addWidget(self.pushButton_5)
        self.btnExcel = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        self.btnExcel.setObjectName("btnExcel")
        self.verticalLayout_3.addWidget(self.btnExcel)
        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_3.addItem(spacerItem2)
        self.horizontalLayoutWidget_4 = QtWidgets.QWidget(self.tabReports)
        self.horizontalLayoutWidget_4.setGeometry(QtCore.QRect(119, 0, 431, 31))
        self.horizontalLayoutWidget_4.setObjectName("horizontalLayoutWidget_4")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_4)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.lblFrom = QtWidgets.QLabel(self.horizontalLayoutWidget_4)
        self.lblFrom.setObjectName("lblFrom")
        self.horizontalLayout_4.addWidget(self.lblFrom)
        self.dateFrom = QtWidgets.QDateTimeEdit(self.horizontalLayoutWidget_4)
        self.dateFrom.setObjectName("dateFrom")
        self.horizontalLayout_4.addWidget(self.dateFrom)
        self.lblTo = QtWidgets.QLabel(self.horizontalLayoutWidget_4)
        self.lblTo.setObjectName("lblTo")
        self.horizontalLayout_4.addWidget(self.lblTo)
        self.dateTo = QtWidgets.QDateTimeEdit(self.horizontalLayoutWidget_4)
        self.dateTo.setObjectName("dateTo")
        self.horizontalLayout_4.addWidget(self.dateTo)
        self.txtTotal = QtWidgets.QLineEdit(self.tabReports)
        self.txtTotal.setGeometry(QtCore.QRect(100, 540, 461, 41))
        self.txtTotal.setObjectName("txtTotal")
        self.tabWidget.addTab(self.tabReports, "")
        self.gridLayout.addWidget(self.tabWidget, 1, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 951, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.initialSetup()

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(2)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        item = self.tblCategory.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Category ID"))
        item = self.tblCategory.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Category"))
        self.btnAdd.setText(_translate("MainWindow", "Add"))
        self.btnEdit.setText(_translate("MainWindow", "Edit"))
        self.btnDelete.setText(_translate("MainWindow", "Delete"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tabCategory), _translate("MainWindow", "Categories"))
        item = self.tblExpenses.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Expense_ID"))
        item = self.tblExpenses.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "category ID"))
        item = self.tblExpenses.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Expense Date"))
        item = self.tblExpenses.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Expense"))
        item = self.tblExpenses.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Amount"))
        item = self.tblExpenses.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Notes"))
        self.btnAddExpense.setText(_translate("MainWindow", "Add"))
        self.btnEditExpense.setText(_translate("MainWindow", "Edit"))
        self.btnDeleteExpense.setText(_translate("MainWindow", "Delete"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tabExpenses), _translate("MainWindow", "Expenses"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Category"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Expense ID"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Category ID"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Expense Date"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Expense"))
        item = self.tableWidget.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Total Amount"))
        item = self.tableWidget.horizontalHeaderItem(6)
        item.setText(_translate("MainWindow", "Notes"))
        self.btnGenerate.setText(_translate("MainWindow", "Generate"))
        self.pushButton.setText(_translate("MainWindow", "PushButton"))
        self.pushButton_2.setText(_translate("MainWindow", "PushButton"))
        self.pushButton_3.setText(_translate("MainWindow", "PushButton"))
        self.pushButton_4.setText(_translate("MainWindow", "PushButton"))
        self.pushButton_5.setText(_translate("MainWindow", "PushButton"))
        self.btnExcel.setText(_translate("MainWindow", "Generate Excel"))
        self.lblFrom.setText(_translate("MainWindow", "FROM"))
        self.lblTo.setText(_translate("MainWindow", "  TO"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tabReports), _translate("MainWindow", "Reports"))


###################  END UI GENERATION #######################
    def initialSetup(self):
        self.setupDatabase()
        self.setupCategoryEvents()
        self.setupExpenseEvents()
        self.setupReportEvents()




########################################################################
#                                                                      #
#                           DATABASE                                   #
#                                                                      #
########################################################################


    def setupDatabase(self):
        self.connect()
        print("-----Database Connected-----")
        self.refresh("category")
        self.refresh("expense")

    def connect(self):
        self.cnx = mysql.connector.connect(user="root",
                                           password="12345678",
                                           host="127.0.0.1",
                                           database="homework04")
    def refresh(self,tabName):
        if tabName == "category" :
            self.tblCategory.setRowCount(0)
            cursor = self.cnx.cursor()
            query = "SELECT * FROM categories "
            cursor.execute(query)

            for (category_ID, category) in cursor:
                rowCount = self.tblCategory.rowCount()
                self.tblCategory.insertRow(rowCount)
                self.tblCategory.setItem(rowCount, 0, QtWidgets.QTableWidgetItem(str(category_ID)))
                self.tblCategory.setItem(rowCount, 1, QtWidgets.QTableWidgetItem(category))
            cursor.close()

            print("Category Database Refreshed")

        elif tabName == "expense":

            self.tblExpenses.setRowCount(0)  # 正确地清空 tblExpenses 而不是 tblCategory
            cursor = self.cnx.cursor()
            query = "SELECT * FROM expenses"
            cursor.execute(query)


            for (expense_id, category_id, expense_date, expense, amount, notes) in cursor:

                rowCount = self.tblExpenses.rowCount()

                self.tblExpenses.insertRow(rowCount)  # 正确地在 tblExpenses 中插入新行
                self.tblExpenses.setItem(rowCount, 0, QtWidgets.QTableWidgetItem(str(expense_id)))
                self.tblExpenses.setItem(rowCount, 1, QtWidgets.QTableWidgetItem(str(category_id)))

                if isinstance(expense_date, datetime):
                    expense_date_str = expense_date.strftime("%Y-%m-%d %H:%M:%S")
                else:
                    expense_date_str = str(expense_date)

                date_item = QtWidgets.QTableWidgetItem(expense_date_str)
                self.tblExpenses.setItem(rowCount, 2, date_item)
                self.tblExpenses.setItem(rowCount, 3, QtWidgets.QTableWidgetItem(expense))
                self.tblExpenses.setItem(rowCount, 4, QtWidgets.QTableWidgetItem(str(amount)))
                self.tblExpenses.setItem(rowCount, 5, QtWidgets.QTableWidgetItem(notes))


            cursor.close()
            print("Expense Database Refreshed")





####################################    DATA CATEGORY    ###############################################

    def insertCategory(self, a_listValue):
        cursor = self.cnx.cursor()
        if a_listValue[1] == "" :
            QMessageBox.warning(None, "Value can not be null", "Please enter all values")
            return
        if len(a_listValue[1]) > 20:
            QMessageBox.warning(None, "INPUT ERROR", "Category must be 20 characters or less.")
            return

        query = ("INSERT INTO categories"
                 "(category)"
                 "VALUES (%s)")

        values = [a_listValue[1]]
        cursor.execute(query, values)

        self.cnx.commit()

        # Check remaining elements
        cursor.execute("SELECT MAX(category_ID) FROM categories")
        max_id = cursor.fetchone()[0]

        # If there are remaining elements, reset AUTO_INCREMENT
        if max_id is not None:
            reset_query = "ALTER TABLE categories AUTO_INCREMENT = %s"
            cursor.execute(reset_query, (max_id + 1,))
        else:
            # If no elements left, reset AUTO_INCREMENT to 1
            cursor.execute("ALTER TABLE categories AUTO_INCREMENT = 1")


        cursor.close()
        print("Database Inserted")

    def deleteCategory(self, a_ID):
        cursor = self.cnx.cursor()
        try:
            check_query = ("SELECT COUNT(*) FROM expenses WHERE category_ID = %s")
            cursor.execute(check_query, (a_ID,))

            if cursor.fetchone()[0] > 0:
                QMessageBox.warning(None, "Delete Error", "This category cannot be deleted because it is referenced in expenses.")
                return

            query = ("DELETE FROM categories WHERE category_ID = %s")
            values = (a_ID,)
            cursor.execute(query, values)
            self.cnx.commit()

            cursor.execute("SELECT MAX(category_ID) FROM categories")
            result = cursor.fetchone()  # use soource: https://dev.mysql.com/doc/connector-python/en/connector-python-api-mysqlcursor-fetchone.html
            max_id = result[0] if result else None

            if max_id is not None:
                reset_query = "ALTER TABLE categories AUTO_INCREMENT = %s"
                cursor.execute(reset_query, (max_id + 1,))
            else:
                cursor.execute("ALTER TABLE categories AUTO_INCREMENT = 1")

            print("Successfully Deleted")

        except Exception as e:
            QMessageBox.warning(None, "Delete Error", str(e))
        finally:
            cursor.close()

    def updateCategory(self, a_listValue):
        cursor = self.cnx.cursor()
        query = ("UPDATE categories "
                 "SET category = %s "
                 "WHERE category_ID = %s")

        values = (a_listValue[1], a_listValue[0])  # 顺序调整为 category 和 category_ID
        cursor.execute(query, values)
        self.cnx.commit()
        cursor.close()
        print("Successfully Updated")




##############################    DATA CATEGORY END    ######################################

##############################    DATA EXPENSE    ##########################################

    def insertExpense(self, a_listValue):
        cursor = self.cnx.cursor()

        if a_listValue[1] == "" or a_listValue[2] == "" or a_listValue[3] == "" or a_listValue[4] == "":
            QMessageBox.warning(None, "Value can not be null", "Please enter all values")
            return

        query = ("INSERT INTO expenses "
                 "(category_ID, expense_date, expense, amount, notes) "
                 "VALUES (%s, %s, %s, %s, %s)")

        values = a_listValue[1:]
        cid = values[0]
        start_index = cid.find('Category_ID: ') + len('Category_ID: ')
        end_index = cid.find(',', start_index)
        cid_n = cid[start_index:end_index].strip()
        values[0] = cid_n
        cursor.execute(query, values)

        #make sure data is committed to the database

        self.cnx.commit()

        cursor.execute("SELECT MAX(expense_ID) FROM expenses")
        max_id = cursor.fetchone()[0]

        # If there are remaining elements, reset AUTO_INCREMENT
        if max_id is not None:
            reset_query = "ALTER TABLE expenses AUTO_INCREMENT = %s"
            cursor.execute(reset_query, (max_id + 1,))
        else:
            # If no elements left, reset AUTO_INCREMENT to 1
            cursor.execute("ALTER TABLE expenses AUTO_INCREMENT = 1")

        cursor.close()
        print("Succesfully Inserted Expense")

    def updateExpense(self, a_listValue):
        cursor = self.cnx.cursor()
        query = ("UPDATE expenses "
                 "SET category_ID = %s, expense_date = %s, expense = %s, amount = %s, notes = %s "
                 "WHERE expense_ID = %s")    # seven values are required

        values = a_listValue[1:]
        cid = values[0]
        start_index = cid.find('Category_ID: ') + len('Category_ID: ')
        end_index = cid.find(',', start_index)
        cid_n = cid[start_index:end_index].strip()
        values[0] = cid_n # contains as only 6 values
        values.append(a_listValue[0])

        cursor.execute(query, values)
        self.cnx.commit()
        cursor.close()
        print("Succesfully Updated")

    def deleteExpense(self, a_ID):
        cursor = self.cnx.cursor()
        query = ("DELETE FROM expenses "
                 "WHERE expense_ID = %s")

        values = []
        values.append(a_ID)
        cursor.execute(query, values)
        self.cnx.commit()
        cursor.execute("SELECT MAX(expense_ID) FROM expenses")
        max_id = cursor.fetchone()[0]   # use soource: https://dev.mysql.com/doc/connector-python/en/connector-python-api-mysqlcursor-fetchone.html

        # If there are remaining elements, reset AUTO_INCREMENT
        if max_id is not None:
            reset_query = "ALTER TABLE expenses AUTO_INCREMENT = %s"
            cursor.execute(reset_query, (max_id + 1,))
        else:
            # If no elements left, reset AUTO_INCREMENT to 1
            cursor.execute("ALTER TABLE expenses AUTO_INCREMENT = 1")
        cursor.close()
        print("Succesfully Deleted")




##############################    DATA EXPENSE END    ######################################

##############################    DATA REPORT     #######################################

    def generate(self):
        cursor = self.cnx.cursor()
        query = (
            "SELECT "
            "c.category, "
            "GROUP_CONCAT(e.expense_ID) as expense_ID, "
            "GROUP_CONCAT(e.category_ID) as category_ID, "
            "GROUP_CONCAT(e.expense_date) as expense_date, "
            "GROUP_CONCAT(e.expense) as expense, "
            "SUM(e.amount) as total_amount, "
            "GROUP_CONCAT(e.notes) as notes "
            "FROM expenses e "
            "JOIN categories c ON e.category_id = c.category_ID "
            "GROUP BY c.category"
        )

        cursor.execute(query)
        results = cursor.fetchall()

        self.tableWidget.setRowCount(len(results))

        for rowIndex, row in enumerate(results):
            for colIndex, item in enumerate(row):
                if colIndex == 3:
                    item = str(item)
                self.tableWidget.setItem(rowIndex, colIndex, QtWidgets.QTableWidgetItem(str(item)))

        self.tableWidget.resizeColumnsToContents()
        cursor.close()

    def queryDate(self):
        cursor = self.cnx.cursor()
        query = (
            "SELECT "
            "c.category, "
            "GROUP_CONCAT(e.expense_ID) as expense_ID, "
            "GROUP_CONCAT(e.category_ID) as category_ID, "
            "GROUP_CONCAT(e.expense_date) as expense_date, "
            "GROUP_CONCAT(e.expense) as expense, "
            "SUM(e.amount) as total_amount, "
            "GROUP_CONCAT(e.notes) as notes "
            "FROM expenses e "
            "JOIN categories c ON e.category_id = c.category_ID "
            "GROUP BY c.category"
        )

        cursor.execute(query)
        results = cursor.fetchall()

        self.tableWidget.setRowCount(len(results))

        for rowIndex, row in enumerate(results):
            for colIndex, item in enumerate(row):
                if colIndex == 3:
                    item = str(item)
                self.tableWidget.setItem(rowIndex, colIndex, QtWidgets.QTableWidgetItem(str(item)))

        self.tableWidget.resizeColumnsToContents()
        cursor.close()


##############################    DATA REPORT END    #######################################





########################################################################
#                                                                      #
#                           Category Events                            #
#                                                                      #
########################################################################

    def setupCategoryEvents(self):
        self.btnAdd.clicked.connect(self.btnAdd_clicked)
        self.btnEdit.clicked.connect(self.btnEdit_clicked)
        self.btnDelete.clicked.connect(self.btnDelete_clicked)

    def btnAdd_clicked(self):
        Dialog = QtWidgets.QDialog()
        form = category.Ui_Dialog()
        form.setupUi(Dialog, None)
        result = Dialog.exec_()

        if result == 1: # means that user clicked OK
            listValues  = form.getValues()

            self.insertCategory(listValues)
            self.refresh("category")

    def btnEdit_clicked(self):
        currentRow = self.tblCategory.currentRow()

        if currentRow == -1:  # no row selected
            QMessageBox.warning(None, "SELECTING ROW", "Please select row first")
            return

        listValues = []
        listValues.append(self.tblCategory.item(currentRow, 0).text())  # category_ID
        listValues.append(self.tblCategory.item(currentRow, 1).text())  # category

        Dialog = QtWidgets.QDialog()
        form = category.Ui_Dialog()
        form.setupUi(Dialog, listValues)
        result = Dialog.exec_()

        if result == 1:  # means that user clicked OK
            # 1. get the list of results from the dialog
            listValues = form.getValues()

            # 2. update the values in the table
            self.updateCategory(listValues)
            self.refresh("category")

    def btnDelete_clicked(self):
        currentRow = self.tblCategory.currentRow()

        if currentRow == -1:  # no row selected
            QMessageBox.warning(None, "SELECTING ROW", "Please select row first")
            return

        answer = QMessageBox.question(
            None,
            "DELETE ROW?",
            "Are you sure you want to delete this row?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )

        # check if user clicked Yes button
        if answer == QMessageBox.StandardButton.Yes:
            ID = self.tblCategory.item(currentRow, 0).text()

            # delete from database
            self.deleteCategory(ID)
            self.refresh("category")



########################################################################
#                                                                      #
#                           Expense Events                             #
#                                                                      #
########################################################################

    def setupExpenseEvents(self):
        self.btnAddExpense.clicked.connect(self.btnAddExpense_clicked)
        self.btnEditExpense.clicked.connect(self.btnEditExpense_clicked)
        self.btnDeleteExpense.clicked.connect(self.btnDeleteExpense_clicked)


    def btnAddExpense_clicked(self):
        Dialog = QtWidgets.QDialog()
        form = expense.Ui_Dialog()
        form.setupUi(Dialog, None)
        result = Dialog.exec_()

        if result == 1: # means that user clicked OK
            listValues  = form.getValues()

            self.insertExpense(listValues)
            self.refresh("expense")


    def btnEditExpense_clicked(self):
        # get data from selected row
        currentRow = self.tblExpenses.currentRow()

        if currentRow == -1:  # no row selectedl
            QMessageBox.warning(None, "SELECTING ROW", "Pease select row first")
            return

        listValues = []
        listValues.append(self.tblExpenses.item(currentRow, 0).text())
        listValues.append(self.tblExpenses.item(currentRow, 1).text())
        listValues.append(self.tblExpenses.item(currentRow, 2).text())
        listValues.append(self.tblExpenses.item(currentRow, 3).text())
        listValues.append(self.tblExpenses.item(currentRow, 4).text())
        listValues.append(self.tblExpenses.item(currentRow, 5).text())

        Dialog = QtWidgets.QDialog()
        form = expense.Ui_Dialog()
        form.setupUi(Dialog, listValues)  # None --> no list, no need to send data when creating a new record
        result = Dialog.exec_()


        if result == 1:  # means that user clicked OK
            # 1. get the list of results from the dialog
            listValues = form.getValues()

            # 2. update the values in the table
            self.updateExpense(listValues)
            self.refresh("expense")

    def btnDeleteExpense_clicked(self):
        currentRow = self.tblExpenses.currentRow()

        if currentRow == -1:  # no row selected
            QMessageBox.warning(None, "SELECTING ROW", "Please select row first")
            return

        answer = QMessageBox.question(
            None,
            "DELETE ROW?",
            "Are you sure you want to delete this row",
            QMessageBox.StandardButton.Yes,
            QMessageBox.StandardButton.No
        )

        # check if user clicked Yes button
        if answer == QMessageBox.StandardButton.Yes:
            ID = self.tblExpenses.item(currentRow, 0).text()

            #delete form database
            self.deleteExpense(ID)
            self.refresh("expense")





########################################################################
#                                                                      #
#                          Report  Events                              #
#                                                                      #
########################################################################

    # noinspection PyUnresolvedReferences
    def setupReportEvents(self):
        self.btnGenerate.clicked.connect(self.btnGenerate_clicked)
        self.btnExcel.clicked.connect(self.btnExcel_clicked)

    def btnGenerate_clicked(self):

        self.generate()

    def btnDate_query_clicked(self):
        self.queryDate()




########################################################################
#                                                                      #
#                           Excel Events                             #
#                                                                      #
########################################################################

    def btnExcel_clicked(self):

        rowCount = self.tableWidget.rowCount()

        columnCount = self.tableWidget.columnCount()

        # Create a new work book
        workbook = Workbook()
        worksheet = workbook.active

        for column in range(columnCount):
            worksheet.cell(row = 1, column = column + 1, value = self.tableWidget.horizontalHeaderItem(column).text())


        for row in range(rowCount):
            for column in range(columnCount):
                worksheet.cell(row = row + 2, column = column + 1, value = self.tableWidget.item(row, column).text())

        workbook.save('expense.xlsx')
        QMessageBox.information(None, "EXPORTED", "Exported Excel file")

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
